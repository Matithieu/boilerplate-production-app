server {
  # Listen on plain old HTTP and catch all requests so they can be redirected
  # to HTTPS instead.
  listen 80 reuseport;
  listen [::]:80 reuseport;

  server_name localhost www.localhost;

  server_tokens off;

  # Anything requesting this particular URL should be served content from
  # Certbot's folder so the HTTP-01 ACME challenges can be completed for the
  # HTTPS certificates.
  location /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }

  # Everything else gets shunted over to HTTPS for each user defined
  # server to handle.
  location / {
    return 301 https://$host$request_uri;
  }
}

server {
  listen 443 ssl reuseport;
  listen [::]:443 ssl reuseport;

  server_tokens off;

  server_name localhost;
  root /usr/share/nginx/html/ui;

  proxy_buffer_size 128k;
  proxy_buffers 8 128k;
  proxy_busy_buffers_size 256k;
  proxy_temp_file_write_size 256k;
  client_header_buffer_size 64k;
  large_client_header_buffers 4 64k;

  ssl_certificate /etc/nginx/certs/server.crt;
  ssl_certificate_key /etc/nginx/certs/server.key;
  
  location / {
    rewrite ^/(.*)$ https://localhost:5173/$1 permanent;
  }

  location /api/ {
    auth_request /oauth2/auth;
    error_page 401 =403 /oauth2/sign_in;

    auth_request_set $user            $upstream_http_x_auth_request_user;
    auth_request_set $email           $upstream_http_x_auth_request_email;
    proxy_set_header X-User           $user;
    proxy_set_header X-Email          $email;
    proxy_set_header Host             $host;

    auth_request_set $token  $upstream_http_x_auth_request_access_token;
    proxy_set_header X-Access-Token $token;

    auth_request_set $auth_cookie $upstream_http_set_cookie;
    add_header Set-Cookie $auth_cookie;
    add_header Set-Cookie "Path=/; Secure; HttpOnly; SameSite=None";

    auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;

    if ($auth_cookie ~* "(; .*)") {
        set $auth_cookie_name_0 $auth_cookie;
        set $auth_cookie_name_1 "auth_cookie_name_1=$auth_cookie_name_upstream_1$1";
    }

    # Send both Set-Cookie headers now if there was a second part
    if ($auth_cookie_name_upstream_1) {
        add_header Set-Cookie $auth_cookie_name_0;
        add_header Set-Cookie $auth_cookie_name_1;
    }

    proxy_pass http://backend:8080/;
  }

  location /grafana/ {
    proxy_set_header Host $host;
    proxy_pass http://grafana:3000/grafana/;
    rewrite  ^/grafana/(.*)  /$1 break;
  }

  location /pgadmin4/ {
    proxy_set_header X-Script-Name /pgadmin4;
    proxy_set_header Host $host;
    proxy_redirect off;
    proxy_pass http://pgadmin4/;
  }

  location /auth/ {
    proxy_pass https://keycloak:8180/auth/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # if ssl
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  location /oauth2/ {
    proxy_pass       http://oauth2-proxy:4180;
    proxy_set_header Host                    $host;
    proxy_set_header X-Real-IP               $remote_addr;
    proxy_set_header X-Auth-Request-Redirect $request_uri;
    proxy_connect_timeout 1;
    proxy_send_timeout 30;
    proxy_read_timeout 30;
    #proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;
  }
  
  location = /oauth2/auth {
    proxy_pass       http://oauth2-proxy:4180;
    proxy_set_header Host             $host;
    proxy_set_header X-Real-IP        $remote_addr;
    proxy_set_header X-Forwarded-Uri  $request_uri;

    # nginx auth_request includes headers but not body
    proxy_set_header Content-Length   "";
    proxy_pass_request_body           off;
  }
}

